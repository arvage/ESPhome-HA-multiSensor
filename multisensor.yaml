substitutions: # your own values in this section
  # WEATHER
  weather_entity: weather.ecobee_thermostat # entity from Home Assistant 
  
  # BOARD
  esp_board: "esp32dev"
  
  # DISPLAY
  display_platform: "ssd1306_i2c"  
  display_model: "SSD1306 128x64"
  
  # SENSOR
  dht_model: AUTO_DETECT
  
  # PINS
  dht_pin: "GPIO4"
  sda_pin: "GPIO21"
  scl_pin: "GPIO22"
  reset_pin: "GPIO0"
  touch_pin1: "GPIO15"
  onboard_LED_pin: "2"
  
  # I2C 
  display_i2c_address: "0x3C"
  mlx_i2c_address: "0x5A"
  ens160_i2c_address: "0x53"
  bme680_i2c_address: "0x77"

  log_level: "DEBUG"
##################################################################
# set device name in ESPhome
esphome:
  name: "sensor1"
  friendly_name: MultiSensor
  includes:
      - wifi_icon.h
  on_boot:
    priority: 600
    then:
      - light.turn_on:
          id: wifi_led
          effect: blink_slow

# define board model
esp32:
  board: $esp_board
  framework:
    type: arduino

# log enabler & level
logger:
  level: $log_level

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  enable_on_boot: True
  id: wlan
  on_connect: 
    then: 
      # change wifi led status to solid after successful connection
      - light.turn_on:
          id: wifi_led
          effect: none
      # wait for a delay then switch to weather page
      - delay: 60s
      - display.page.show: page2
      - component.update: oled_display

  # Enable fallback hotspot (captive portal) in case wifi connection fails. the default is 1 minute
  ap:
    ssid: !secret fallback_ssid
    password: !secret fallback_pass

captive_portal:

web_server:
  port: 80
  auth:
    username: !secret esp_user
    password: !secret esp_password

# enabling touch component
esp32_touch:
  setup_mode: false

output:
  # set wifi status led pin
  - platform: gpio
    pin: $onboard_LED_pin
    id: led_wifi

light:
  # defining wifi status led light switch and flashing effects
  - platform: binary
    id: wifi_led
    output: led_wifi
    effects:
      - strobe:
          name: "blink_slow"
          colors:
            - state: true
              duration: 500ms
            - state: false
              duration: 500ms
      - strobe:
          name: "blink_fast"
          colors:
            - state: true
              duration: 200ms
            - state: false
              duration: 200ms

# to use clock on the display
time:
  - platform: homeassistant
    id: esptime

binary_sensor:
  - platform: status
    name: "Display Status"

  # setting up touch pin to act like a switch. this can be replaced with a physical switch 
  - platform: esp32_touch
    name: "Touch"
    pin: $touch_pin1
    threshold: 1000
    on_press: 
      then:
        - display.page.show_next: oled_display
        - component.update: oled_display
        - delay: 60s
        - display.page.show: page2
        - component.update: oled_display

    # setup long press action
    on_click: 
      min_length: 10000ms
      max_length: 15000ms
      then:
        - switch.turn_on: Restart
        
switch:
  - platform: restart
    name: "Restart"
    id: Restart           

sensor:
  - platform: dht
    model: $dht_model
    id: local_temp_sensor
    pin: $dht_pin
    temperature:
      name: "DHT22 Temperature"
      id: local_temp
      filters:
        - lambda: return x * (9.0/5.0) + 32.0;
      unit_of_measurement: "째F"
    humidity:
      name: "DHT22 Humidity"
      id: local_hum
    update_interval: 60s

  - platform: mlx90614
    address: $mlx_i2c_address
    ambient:
      name: "MLX90614 Ambient"
      id: mlx_ambient
      filters:
        - lambda: return x * (9.0/5.0) + 32.0;
      unit_of_measurement: "째F"
    object:
      name: "MLX90614 Object"
      id: mlx_object
      filters:
        - lambda: return x * (9.0/5.0) + 32.0;
      unit_of_measurement: "째F"
    update_interval: 5s

  - platform: ens160_i2c
    eco2:
      name: "ENS160 eCO2"
    tvoc:
      name: "ENS160 Total Volatile Organic Compounds"
    aqi:
      id: ens160_air_quality_index
      name: "ENS160 Air Quality Index"
    update_interval: 60s
    address: $ens160_i2c_address
    compensation:
      temperature: local_temp
      humidity: local_hum
  
  - platform: bme680
    temperature:
      name: "BME680 Temperature"
      oversampling: 16x
    pressure:
      name: "BME680 Pressure"
    humidity:
      name: "BME680 Humidity"
    gas_resistance:
      name: "BME680 Gas Resistance"
    address: $bme680_i2c_address
    update_interval: 60s

  - platform: wifi_signal # Reports the WiFi signal strength in %
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    id: wifi_signal_pct
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: homeassistant
    id: outside_temperature
    entity_id: $weather_entity
    attribute: temperature
    internal: true
    
  - platform: homeassistant
    id: outside_humidity
    entity_id: $weather_entity
    attribute: humidity
    internal: true
  
  - platform: homeassistant
    id: outside_wind_speed
    entity_id: $weather_entity
    attribute: wind_speed
    internal: true

text_sensor:
  - platform: homeassistant
    id: weather_state
    name: "Current Weather Icon"
    entity_id: $weather_entity
    internal: true
  - platform: template
    name: "TCP/IP Address"
    lambda: 'return {WiFi.localIP().toString().c_str()};'
    id: tcp_ip_address
    update_interval: 10s
  - platform: wifi_info
    ssid:
      name: Connected SSID
      id: ssid
    mac_address:
      name: Wifi Mac Address
      id: mac

color:
  - id: red
    red: 93%
    green: 80%
    blue: 38%

font:
  - file: 'SourceSansPro-Light.ttf'
    id: smallest_font
    size: 13
  - file: 'SourceSansPro-Light.ttf'
    id: small_font
    size: 14
  - file: 'SourceSansPro-Light.ttf'
    id: large_font
    size: 18
  - file: 'SourceSansPro-Light.ttf'
    id: font1
    size: 16
  - file: 'SourceSansPro-Light.ttf'
    id: font2
    size: 26
  - file: 'materialdesignicons-webfont.ttf'
    id: font3
    size: 18
    glyphs:
      - "\U000F13D5" #mdi:home-minus-outline
  - file: 'materialdesignicons-webfont.ttf'
    id: font4
    size: 40
    glyphs:
      - "\U000F0594" #"clear-night"
      - "\U000F0590" #"cloudy"
      - "\U000F0591" #"fog"
      - "\U000F0592" #"hail"
      - "\U000F0593" #"lightning"
      - "\U000F067E" #"lightning-rainy"
      - "\U000F0595" #"partlycloudy"
      - "\U000F0596" #"pouring"
      - "\U000F0597" #"rainy"
      - "\U000F0598" #"snowy"
      - "\U000F067F" #"snowy-rainy"
      - "\U000F0599" #"sunny"
      - "\U000F059D" #"windy"
      - "\U000F059E" #"windy-variant"
  - file: 'materialdesignicons-webfont.ttf'
    id: wifi_font
    size: 18
    glyphs:
      - "\U000F0928" # wifi-4
      - "\U000F0925" # wifi-3 
      - "\U000F0922" # wifi-2
      - "\U000F091F" # wifi-1
      - "\U000F0920" # Low-wifi
      - "\U000F092B" # No-wifi
    
i2c:
  sda: $sda_pin
  scl: $scl_pin
  scan: true

display:
  - platform: $display_platform
    model: $display_model
    reset_pin: $reset_pin
    address: $display_i2c_address
    id: oled_display
    pages:
      - id: page1
        lambda: |-
          //////////////////////// Multi Sensor Page 1/////////////////////////////
          // Print wifi signal
          it.print(0, 0, id(wifi_font), wifi_icon(id(wifi_signal_pct).state));
      
          // Print device name
          it.printf(25, 0, id(font1), TextAlign::TOP_LEFT, App.get_name().c_str());

          // Print seperator line
          it.line(0, 20, it.get_width(), 20);

          // Print MAC
          if (id(mac).has_state()) {
            it.printf(0,20, id(smallest_font), "MAC: %s" ,id(mac).state.c_str());
          }

          // Print SSID
          if (id(ssid).has_state()) {
            it.printf(0,33, id(smallest_font), "SSID: %s" , id(ssid).state.c_str());
          }
          else {
            it.printf(0, 33, id(small_font), "Connecting to WiFi...");
          }

          // Print IP
          if (id(tcp_ip_address).state == "0.0.0.0") {
            it.printf(0, 47, id(small_font), "Acquiring IP...");
          }
          else {
            it.printf(0, 47, id(small_font), "IP: %s", id(tcp_ip_address).state.c_str());
          }

          ////////////////////////End of Multi Sensor ///////////////////////////
        
      - id: page2
        lambda: |-
          /////////////////  Weather Station Page 2 //////////////////////
          
          // Print time in HH:MM format
          it.strftime(0, 0, id(font1), TextAlign::TOP_LEFT, "%H:%M %a", id(esptime).now());

          // Print Inside Temperature 
          if (id(local_temp).has_state()) {
            it.printf(it.get_width(), 0, id(font1), TextAlign::TOP_RIGHT , "%7.0f째", id(local_temp).state);
          }

          // Print seperator line
          it.line(0, 20, it.get_width(), 20);

          if (id(weather_state).has_state()) {
            std::map<std::string, std::string> weather_icon_map
              {
                {"clear-night", "\U000F0594"},
                {"cloudy", "\U000F0590"},
                {"fog", "\U000F0591"},
                {"hail", "\U000F0592"},
                {"lightning", "\U000F0593"},
                {"lightning-rainy", "\U000F067E"},
                {"partlycloudy", "\U000F0595"},
                {"pouring", "\U000F0596"},
                {"rainy", "\U000F0597"},
                {"snowy", "\U000F0598"},
                {"snowy-rainy", "\U000F067F"},
                {"sunny", "\U000F0599"},
                {"windy", "\U000F059D"},
                {"windy-variant", "\U000F059E"},
              };
            it.printf(0, it.get_height(), id(font4), TextAlign::BASELINE_LEFT, weather_icon_map[id(weather_state).state.c_str()].c_str());
          }

          // Print Outside Temperature
          if (id(outside_temperature).has_state()) {
            it.printf(42, 32, id(font2), "%.0f째", id(outside_temperature).state);
          }
          else {
            it.printf(0, 32, id(font1), id(red), TextAlign::TOP_LEFT, "Getting Data...");
          }
      
          // Print Outside Humidity
          if (id(outside_humidity).has_state()) {
            it.printf(it.get_width(), 25, id(font1), TextAlign::TOP_RIGHT, "%7.0f%%", id(outside_humidity).state);
          }
      
          // Print Outside Cloud Coverage
          if (id(outside_wind_speed).has_state()) {
            it.printf(it.get_width(), 43, id(small_font), TextAlign::TOP_RIGHT, "%7.1f mph", id(outside_wind_speed).state);
          }

          ////////////////// End of Weather Station //////////////////////////
      - id: page3
        lambda: |-
          /////////////////  Ambient Page 3 //////////////////////
          
          // Print time in HH:MM format
          it.strftime(0, 0, id(font1), TextAlign::TOP_LEFT, "%H:%M %a", id(esptime).now());

          // Print Inside Temperature 
          if (id(local_temp).has_state()) {
            it.printf(it.get_width(), 0, id(font1), TextAlign::TOP_RIGHT, "%7.0f째", id(local_temp).state);
          }

          // Print seperator line
          it.line(0, 20, it.get_width(), 20);

          // Print Ambient
          if (id(mlx_ambient).has_state()) {
            it.printf(0, 20, id(large_font), TextAlign::TOP_LEFT, "Ambient", id(mlx_ambient).state);
            it.printf(it.get_width(), 20, id(large_font), TextAlign::TOP_RIGHT, "%7.0f째", id(mlx_ambient).state);
          }

          // Print Object
          if (id(mlx_object).has_state()) {
            it.printf(0, 40, id(large_font), TextAlign::TOP_LEFT, "Object", id(mlx_object).state);
            it.printf(it.get_width(), 40, id(large_font), TextAlign::TOP_RIGHT, "%7.0f째", id(mlx_object).state);
          }
      - id: page4
        lambda: |-
          /////////////////  ENS Page 5 //////////////////////
          
          // Print time in HH:MM format
          it.strftime(0, 0, id(font1), TextAlign::TOP_LEFT, "%H:%M %a", id(esptime).now());

          // Print Inside Temperature 
          if (id(local_temp).has_state()) {
            it.printf(it.get_width(), 0, id(font1), TextAlign::TOP_RIGHT, "%7.0f째", id(local_temp).state);
          }

          // Print seperator line
          it.line(0, 20, it.get_width(), 20);

          // Print Ambient
          if (id(mlx_ambient).has_state()) {
            it.printf(0, 20, id(large_font), TextAlign::TOP_LEFT, "Ambient", id(mlx_ambient).state);
            it.printf(it.get_width(), 20, id(large_font), TextAlign::TOP_RIGHT, "%7.0f째", id(mlx_ambient).state);
          }

          // Print Object
          if (id(mlx_object).has_state()) {
            it.printf(0, 40, id(large_font), TextAlign::TOP_LEFT, "Object", id(mlx_object).state);
            it.printf(it.get_width(), 40, id(large_font), TextAlign::TOP_RIGHT, "%7.0f째", id(mlx_object).state);
          }
      - id: page5
        lambda: |-
          /////////////////  BME Page 5 //////////////////////
          
          // Print time in HH:MM format
          it.strftime(0, 0, id(font1), TextAlign::TOP_LEFT, "%H:%M %a", id(esptime).now());

          // Print Inside Temperature 
          if (id(local_temp).has_state()) {
            it.printf(it.get_width(), 0, id(font1), TextAlign::TOP_RIGHT, "%7.0f째", id(local_temp).state);
          }

          // Print seperator line
          it.line(0, 20, it.get_width(), 20);

          // Print Ambient
          if (id(mlx_ambient).has_state()) {
            it.printf(0, 20, id(large_font), TextAlign::TOP_LEFT, "Ambient", id(mlx_ambient).state);
            it.printf(it.get_width(), 20, id(large_font), TextAlign::TOP_RIGHT, "%7.0f째", id(mlx_ambient).state);
          }

          // Print Object
          if (id(mlx_object).has_state()) {
            it.printf(0, 40, id(large_font), TextAlign::TOP_LEFT, "Object", id(mlx_object).state);
            it.printf(it.get_width(), 40, id(large_font), TextAlign::TOP_RIGHT, "%7.0f째", id(mlx_object).state);
          }
